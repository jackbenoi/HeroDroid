{"version":3,"sources":["base.coffee"],"names":[],"mappings":"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","file":"helper.js","sourcesContent":["###*\n# Act as our Helpers for all our projects.\n#\n# @class Helpers\n# @package Base Helper Class\n# @author Anthony Pillos <dev.anthonypillos@gmail.com>\n###\nclass Helpers\n\n    isDebug: true\n\n    obj: {}\n\n    constructor: () ->\n        @obj.startSymbol    = '{{'\n        @obj.endSymbol      = '}}'\n\n    log: (msg)->\n        console.log msg if @isDebug\n\n    isUndefined: ( obj ) -> obj?\n    \n    ###*\n    # Format File Size into Human Readable Content\n    #\n    # @param {integer} bytes\n    # @param {integer} si\n    # @return string\n    ###\n    formatBytes: (bytes, si) ->\n        si = 1024\n        thresh = if si then 1000 else 1024\n        if bytes < thresh\n            return bytes + ' B'\n        units = if si then [\n            'KB'\n            'MB'\n            'GB'\n            'TB'\n            'PB'\n            'EB'\n            'ZB'\n            'YB'\n        ]\n        else [\n            'KiB'\n            'MiB'\n            'GiB'\n            'TiB'\n            'PiB'\n            'EiB'\n            'ZiB'\n            'YiB'\n        ]\n\n        u = -1\n        loop\n            bytes /= thresh\n            ++u\n            unless bytes >= thresh\n                break\n        bytes.toFixed(1)+' '+units[u]\n\n\n    ###*\n    # Initialize angular module\n    #\n    # @param {string} moduleName\n    # @param {array} config\n    # @return angular instance\n    ###\n    angularInit: (moduleName, config) ->\n        x = @\n        angular.module(moduleName, config)\n\n\n    ###*\n    # Set LocaStorage Item using key value pair\n    #\n    # @param {string} key\n    # @param {array,object,string} val\n    # @return void\n    ###\n    set: (key, val) ->\n        localStorage.setItem key, JSON.stringify val\n\n    ###*\n    # Get the save item from localStorage by its key id\n    #\n    # @param {string} key\n    # @return mixed\n    ###\n    get: (key) ->\n        try\n            JSON.parse localStorage.getItem key\n        catch e\n            return false\n\n            \n    ###*\n    # Remove LocaStorage Item using key value pair\n    #\n    # @param {string} key\n    # @return void\n    ###\n    remove: (key) ->\n        localStorage.removeItem key\n        return\n\n\n    ###*\n    # Delete all data from LocaStorage\n    # Set key_pair that you want to delete\n    #\n    # @param {string} key\n    # @return void\n    ###\n    clear: (key_pair) ->\n        for key, value of localStorage\n\n            if key_pair is undefined or key_pair is true\n                @remove key\n\n            else if key.indexOf(key_pair) >= 0\n                @remove key\n\n        return\n\n    isEmptyObj: (obj) ->\n        # null and undefined are \"empty\"\n        if obj is null\n            return true\n\n        for key of obj\n            if hasOwnProperty.call(obj, key)\n                return false\n\n        if typeof obj is 'undefined'\n            return true\n\n        if obj.length > 0\n            return false\n\n        if obj.length == 0\n            return true\n\n        return true\n\n\n    ###*\n    # Generate Random Number\n    #\n    # @param {string} key\n    # @return void\n    ###\n    randomKey: (str_count) ->\n\n        str_count  = 6 if not str_count\n        result     = ''\n        randomChar = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\"\n\n        for i in [ 0...str_count ] by 1\n            result += randomChar.charAt Math.floor Math.random() * randomChar.length\n\n        return result\n\n                \n    ###*\n    # Get File Extension Name of the current string\n    #\n    # @params (string)  name    File Name\n    # @return string\n    ###\n    getFileExtension: (name) ->\n        return name.split('.').pop().toLowerCase()\n\n    ###*\n    # Validate if Extension is Allowed or Not from the given data\n    #\n    # @params (string)  fileName    File Name with Extension\n    # @params (array)   exts        Extension Lists, that you allow\n    # @return string\n    ###\n    isAllowedExtension: (fileName,exts) ->\n        return (new RegExp('(' + exts.join('|').replace(/\\./g, '\\\\.') + ')$')).test(fileName)\n\n    sprintf: () ->\n        regex = /%%|%(\\d+\\$)?([-+\\'#0 ]*)(\\*\\d+\\$|\\*|\\d+)?(\\.(\\*\\d+\\$|\\*|\\d+))?([scboxXuideEfFgG])/g\n        a = arguments\n        i = 0\n        format = a[i++]\n        pad = (str, len, chr, leftJustify) ->\n            if !chr\n                chr = ' '\n            padding = if str.length >= len then '' else new Array(1 + len - (str.length) >>> 0).join(chr)\n            if leftJustify then str + padding else padding + str\n\n        justify = (value, prefix, leftJustify, minWidth, zeroPad, customPadChar) ->\n            diff = minWidth - (value.length)\n            if diff > 0\n                if leftJustify or !zeroPad\n                    value = pad(value, minWidth, customPadChar, leftJustify)\n                else\n                    value = value.slice(0, prefix.length) + pad('', diff, '0', true) + value.slice(prefix.length)\n            value\n\n        formatString = (value, leftJustify, minWidth, precision, zeroPad, customPadChar) ->\n            if precision != null\n                value = value.slice(0, precision)\n            justify value, '', leftJustify, minWidth, zeroPad, customPadChar\n\n        formatBaseX = (value, base, prefix, leftJustify, minWidth, precision, zeroPad) ->\n            # Note: casts negative numbers to positive ones\n            number = value >>> 0\n            prefix = prefix and number and {\n              '2': '0b'\n              '8': '0'\n              '16': '0x'\n            }[base] or ''\n            value = prefix + pad(number.toString(base), precision or 0, '0', false)\n            justify value, prefix, leftJustify, minWidth, zeroPad\n\n        doFormat = (substring, valueIndex, flags, minWidth, _, precision, type) ->\n            number = undefined\n            prefix = undefined\n            method = undefined\n            textTransform = undefined\n            value = undefined\n\n            if substring == '%%'\n              return '%'\n            # parse flags\n            leftJustify = false\n            positivePrefix = ''\n            zeroPad = false\n            prefixBaseX = false\n            customPadChar = ' '\n            flagsl = flags.length\n            j = 0\n\n            while flags and j < flagsl\n              switch flags.charAt(j)\n                when ' '\n                  positivePrefix = ' '\n                when '+'\n                  positivePrefix = '+'\n                when '-'\n                  leftJustify = true\n                when '\\''\n                  customPadChar = flags.charAt(j + 1)\n                when '0'\n                  zeroPad = true\n                  customPadChar = '0'\n                when '#'\n                  prefixBaseX = true\n              j++\n\n\n            if !minWidth\n              minWidth = 0\n            else if minWidth == '*'\n              minWidth = +a[i++]\n            else if minWidth.charAt(0) == '*'\n              minWidth = +a[minWidth.slice(1, -1)]\n            else\n              minWidth = +minWidth\n            # Note: undocumented perl feature:\n            if minWidth < 0\n              minWidth = -minWidth\n              leftJustify = true\n            if !isFinite(minWidth)\n              throw new Error('sprintf: (minimum-)width must be finite')\n            if !precision\n              precision = if 'fFeE'.indexOf(type) > -1 then 6 else if type == 'd' then 0 else undefined\n            else if precision == '*'\n              precision = +a[i++]\n            else if precision.charAt(0) == '*'\n              precision = +a[precision.slice(1, -1)]\n            else\n              precision = +precision\n\n            value = if valueIndex then a[valueIndex.slice(0, -1)] else a[i++]\n            switch type\n              when 's'\n                return formatString(String(value), leftJustify, minWidth, precision, zeroPad, customPadChar)\n              when 'c'\n                return formatString(String.fromCharCode(+value), leftJustify, minWidth, precision, zeroPad)\n              when 'b'\n                return formatBaseX(value, 2, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n              when 'o'\n                return formatBaseX(value, 8, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n              when 'x'\n                return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n              when 'X'\n                return formatBaseX(value, 16, prefixBaseX, leftJustify, minWidth, precision, zeroPad).toUpperCase()\n              when 'u'\n                return formatBaseX(value, 10, prefixBaseX, leftJustify, minWidth, precision, zeroPad)\n              when 'i', 'd'\n                number = +value or 0\n                number = Math.round(number - (number % 1))\n                # Plain Math.round doesn't just truncate\n                prefix = if number < 0 then '-' else positivePrefix\n                value = prefix + pad(String(Math.abs(number)), precision, '0', false)\n                return justify(value, prefix, leftJustify, minWidth, zeroPad)\n              # Should handle locales (as per setlocale)\n              when 'e', 'E', 'f', 'F', 'g', 'G'\n                number = +value\n                prefix = if number < 0 then '-' else positivePrefix\n                method = [\n                  'toExponential'\n                  'toFixed'\n                  'toPrecision'\n                ]['efg'.indexOf(type.toLowerCase())]\n                textTransform = [\n                  'toString'\n                  'toUpperCase'\n                ]['eEfFgG'.indexOf(type) % 2]\n                value = prefix + Math.abs(number)[method](precision)\n                return justify(value, prefix, leftJustify, minWidth, zeroPad)[textTransform]()\n              else\n                return substring\n            return\n        format.replace regex, doFormat\n\nwindow._h = new Helpers()"]}